//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/ImSoWet.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ImSoWet: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ImSoWet()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ImSoWet"",
    ""maps"": [
        {
            ""name"": ""Socks"",
            ""id"": ""1edf63cf-1539-4e1e-a76e-c85a1a0525d1"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""61bc7b6e-8b2f-4719-beb9-a2271319ad78"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Water"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1e1475e9-83c1-484f-8af3-a2a4053b9be3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f07ee262-30be-4570-b450-a29233878054"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""f2e7fcdc-2347-46ea-b342-e9ef3bedef4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ddfeffb-8682-4a00-9861-a79fc69c1fc2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Water"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""a1479720-f36a-44ea-bc50-0c553731ef25"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eb0a6736-2244-4cde-ab3b-a79c454472e2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""44f1315c-88db-4fd5-a4da-fa626718ffbd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""d41f865a-3895-4aa4-b2e3-970f195c456a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""c5e3a60f-063f-4267-878a-752fc5353fc6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8263c9c1-bc97-4986-a0bc-62080c39a0b1"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5a02524-7f93-4c21-9eb1-00ff2b44c96a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Socks
        m_Socks = asset.FindActionMap("Socks", throwIfNotFound: true);
        m_Socks_Move = m_Socks.FindAction("Move", throwIfNotFound: true);
        m_Socks_Water = m_Socks.FindAction("Water", throwIfNotFound: true);
        m_Socks_Look = m_Socks.FindAction("Look", throwIfNotFound: true);
        m_Socks_Interact = m_Socks.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Socks
    private readonly InputActionMap m_Socks;
    private List<ISocksActions> m_SocksActionsCallbackInterfaces = new List<ISocksActions>();
    private readonly InputAction m_Socks_Move;
    private readonly InputAction m_Socks_Water;
    private readonly InputAction m_Socks_Look;
    private readonly InputAction m_Socks_Interact;
    public struct SocksActions
    {
        private @ImSoWet m_Wrapper;
        public SocksActions(@ImSoWet wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Socks_Move;
        public InputAction @Water => m_Wrapper.m_Socks_Water;
        public InputAction @Look => m_Wrapper.m_Socks_Look;
        public InputAction @Interact => m_Wrapper.m_Socks_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Socks; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SocksActions set) { return set.Get(); }
        public void AddCallbacks(ISocksActions instance)
        {
            if (instance == null || m_Wrapper.m_SocksActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SocksActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Water.started += instance.OnWater;
            @Water.performed += instance.OnWater;
            @Water.canceled += instance.OnWater;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(ISocksActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Water.started -= instance.OnWater;
            @Water.performed -= instance.OnWater;
            @Water.canceled -= instance.OnWater;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(ISocksActions instance)
        {
            if (m_Wrapper.m_SocksActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISocksActions instance)
        {
            foreach (var item in m_Wrapper.m_SocksActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SocksActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SocksActions @Socks => new SocksActions(this);
    public interface ISocksActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnWater(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
